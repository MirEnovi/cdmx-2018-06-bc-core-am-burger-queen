{"version":3,"sources":["components/global/content/content.js","components/app/App.js","components/login/index.js","components/menu/index.js","components/page404/index.js","routes.js","serviceWorker.js","index.js"],"names":["Content","body","this","props","react_default","a","createElement","Component","PropTypes","object","isRequired","App","children","className","content","Login","Menu","Page404","AppRoutes","components_app_App","BrowserRouter","basename","process","Switch","Route","path","component","exact","Boolean","window","location","hostname","match","render","routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAGMA,0LAIK,IACDC,EAASC,KAAKC,MAAdF,KACR,OACCG,EAAAC,EAAAC,cAAA,WACEL,UARiBM,cAAhBP,EACGQ,UAAY,CACjBP,KAAMO,IAAUC,OAAOC,YAYZV,QCVTW,mLAKK,IACCC,EAAaV,KAAKC,MAAlBS,SACR,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,eAElBT,EAAAC,EAAAC,cAACQ,EAAD,CAASb,KAAQW,YAXPL,aAAZI,EACGH,UAAY,CACjBI,SAAUJ,IAAUC,OAAOC,YAehBC,QCdAI,EARD,WACZ,OACAX,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,kCCKYU,EARF,WACX,OACAZ,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,iCCUYW,mLAVX,OACDb,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACdT,EAAAC,EAAAC,cAAA,8BALkBC,aCoBPW,EAdG,WACjB,OACAd,EAAAC,EAAAC,cAACa,EAAD,KACCf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAeC,SAAUC,yCACxBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAO,IAAIC,UAAcX,EAAQY,OAAK,IAC7CvB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAO,QAAQC,UAAcV,EAAOW,OAAK,IAChDvB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,UAAcT,cCHLW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,iBAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAAeC,SAASC,eAAe,SDoHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86f21f0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Content extends Component {\r\n  static PropTypes = {\r\n    body: PropTypes.object.isRequired\r\n  };\r\n  render() {\r\n\t\tconst { body } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{body} \r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n};\r\n\r\nexport default Content;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import logo from '../assets/logo.svg';\r\nimport './App.css';\r\n\r\nimport Content from '../global/content/content'\r\n\r\nclass App extends Component {\r\n  static PropTypes = {\r\n    children: PropTypes.object.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n        <Content body = {children}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nconst Login = () => {\r\n  return (\r\n\t\t<section>\r\n\t\t\t<h1> este es un login </h1>\r\n\t\t</section>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nconst Menu = () => {\r\n  return (\r\n\t\t<section>\r\n\t\t\t<h1> este es un Menu </h1>\r\n\t\t</section>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\n\r\nclass Page404 extends Component {\r\n\r\n  render() {\r\n    return (\r\n\t\t\t<div className=\"Pague404\">\r\n\t\t\t\t<h4>\r\n\t\t\t\t\tPage 404\r\n\t\t\t\t</h4>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page404;\r\n","\r\n\r\n\r\nimport React from 'react';\r\nimport { Route, Switch,\tBrowserRouter } from 'react-router-dom';\r\n\r\n\r\nimport App from './components/app/App'; // Componente Principal\r\nimport Login from './components/login';\r\nimport Menu from './components/menu'; \r\nimport Page404 from './components/page404';\r\n\r\nconst AppRoutes = () => {\r\n\treturn (\r\n\t<App>\r\n\t\t<BrowserRouter basename = { process.env.PUBLIC_URL }>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path = '/' component = { Login } exact />\r\n\t\t\t\t<Route path = '/menu' component = { Menu } exact />\r\n\t\t\t\t<Route component = { Page404 } />\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t</App>\r\n\t)\r\n}\r\n\r\nexport default AppRoutes;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport AppRoutes from './routes';\r\n\r\nimport './index.css';\r\n// import App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(<AppRoutes />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}